// Generated by CoffeeScript 1.3.3
(function() {
  var apiBaseUrl, apiParentAuthorQuery, fs, http, jsxml, localServicePort, logPath, logger, path, querystring, rootPath, subscriptionDirectory, sys, url, winston,
    _this = this;

  sys = require('util');

  http = require('http');

  url = require('url');

  path = require('path');

  querystring = require('querystring');

  fs = require('fs');

  jsxml = require('node-jsxml');

  winston = require('winston');

  rootPath = __dirname;

  logPath = path.join(rootPath, 'logs/');

  subscriptionDirectory = path.join(rootPath, 'subscribedUsers/');

  apiBaseUrl = 'http://shackapi.stonedonkey.com/';

  apiParentAuthorQuery = 'Search/?ParentAuthor=';

  logger = new winston.Logger({
    transports: [
      new winston.transports.Console({
        colorize: true,
        timestamp: true
      }), new winston.transports.File({
        filename: logPath + 'webservice.log',
        json: false,
        timestamp: true,
        level: 'silly'
      })
    ]
  });

  localServicePort = 12243;

  ({
    SubscribeRequest: function(subResponse, userName, parsedUrl, requestData) {
      var requestOptions, saveObject, siteUrl,
        _this = this;
      logger.verbose("Subscribe Called.");
      try {
        if (userName.length === 0) {
          subResponse.writeHead(404, {
            "Content-Type": "text/plain"
          });
          logger.warn("Attempt to create a subscription for a blank user. That's no good.");
          subResponse.end("Not found.");
        }
        saveObject = {
          userName: userName,
          dateCreated: new Date(),
          replyCount: 0,
          replyCountLastNotified: 0,
          notificationUri: requestData,
          deviceId: '',
          notificationType: 1
        };
        siteUrl = url.parse(apiBaseUrl + apiParentAuthorQuery + userName);
        requestOptions = {
          host: siteUrl.host,
          port: 80,
          path: siteUrl.path
        };
        return http.get(requestOptions, function(res) {
          var dataReceived, errorOccurred;
          dataReceived = '';
          errorOccurred = false;
          res.on('data', function(chunk) {
            return dataReceived += chunk;
          });
          res.on('error', function(err) {
            errorOccurred = true;
            return logger.error('Error occurred trying to retrieve reply count for ' + userName + '.\n!!ERROR!!: ' + err);
          });
          return res.on('end', function() {
            var parsedQuery, savePath, totalResults, totalResultsAttribute, xmlDoc;
            try {
              xmlDoc = libxmljs.parseXmlString(dataReceived);
              if (xmlDoc === null) {
                return;
              }
              totalResultsAttribute = xmlDoc.root().attr('total_results');
              if (totalResultsAttribute === null) {
                return;
              }
              totalResults = parseInt(totalResultsAttribute.value());
              saveObject.replyCount = totalResults;
              saveObject.replyCountLastNotified = totalResults;
              if (parsedUrl.hasOwnProperty('query')) {
                parsedQuery = querystring.parse(parsedUrl.query);
                logger.silly("Parsed query: " + JSON.stringify(parsedQuery));
                if (parsedQuery.hasOwnProperty('notificationType')) {
                  saveObject.notificationType = parsedQuery['notificationType'];
                } else {
                  subResponse.writeHead(400, {
                    "Content-Type": "text/plain"
                  });
                  logger.error("Missing notification type.");
                  subResponse.end("Missing notification type.");
                  return;
                }
                if (parsedQuery.hasOwnProperty('deviceId')) {
                  saveObject.deviceId = parsedQuery['deviceId'];
                } else {
                  subResponse.writeHead(400, {
                    "Content-Type": "text/plain"
                  });
                  logger.error("Missing device id.");
                  subResponse.end("Missing device id.");
                  return;
                }
              }
              logger.silly("Subscribing with info: " + JSON.stringify(saveObject));
              savePath = path.join(subscriptionDirectory, saveObject.deviceId);
              logger.verbose("Saving data to " + savePath);
              fs.writeFileSync(savePath, JSON.stringify(saveObject));
              logger.info("Updated subscription for " + userName + " with device id " + saveObject.deviceId);
              subResponse.writeHead(200, {
                "Content-Type": "text/plain"
              });
              return subResponse.end("Subscribed " + userName);
            } catch (ex) {
              logger.error('Error occurred in response end for user ' + userName + '.\n!!ERROR!!: ' + ex);
              subResponse.writeHead(400, {
                "Content-Type": "text/plain"
              });
              return subResponse.end("Unknown error.");
            }
          });
        }).on('error', function(ex) {
          logger.error('Error occurred trying to retrieve reply count for ' + userName + '.\n!!ERROR!!: ' + ex);
          subResponse.writeHead(400, {
            "Content-Type": "text/plain"
          });
          return subResponse.end("Unknown error.");
        });
      } catch (ex) {
        logger.error("Exception caught in subscription " + ex);
        subResponse.writeHead(400, {
          "Content-Type": "text/plain"
        });
        return subResponse.end("Unknown error.");
      }
    },
    RemoveRequest: function(response, parsedUrl, userName) {
      var deviceId, file, fileData, parsedQuery, userData;
      if (parsedUrl.hasOwnProperty('query')) {
        parsedQuery = querystring.parse(parsedUrl.query);
        if (parsedQuery.hasOwnProperty('deviceId')) {
          deviceId = parsedQuery['deviceId'];
          file = path.join(subscriptionDirectory, parsedQuery['deviceId']);
          if (path.existsSync(file)) {
            fileData = fs.readFileSync(file, 'utf8');
            userData = JSON.parse(fileData);
            if (userName.toLowerCase() === userData.userName.toLowerCase()) {
              fs.unlinkSync(file);
              logger.info("Removed deviceId " + deviceId + " for " + userName);
              response.writeHead(200, {
                "Content-Type": "text/plain"
              });
              response.end("Removed " + userName);
              return;
            } else {
              logger.error("DeviceId data " + deviceId + " does not match userName " + userName + " cannot remove device registration");
            }
          } else {
            response.writeHead(200, {
              "Content-Type": "text/plain"
            });
            response.end("Removed " + userName);
            return;
          }
        } else {
          logger.error("Missing device id on removal request");
        }
      } else {
        logger.error("Missing query parameter on removal request");
      }
      response.writeHead(400, {
        "Content-Type": "text/plain"
      });
      return response.end("Bad request.");
    }
  });

  http.createServer(function(request, response) {
    var requestData;
    requestData = '';
    request.on('data', function(chunk) {
      return requestData += chunk;
    });
    return request.on('end', function() {
      var parsedUrl, requestHandled, splitPath;
      parsedUrl = url.parse(request.url);
      splitPath = parsedUrl.pathname.split('/');
      requestHandled = false;
      logger.verbose('Parsed URL: ' + JSON.stringify(parsedUrl));
      logger.verbose('Split Path: ' + JSON.stringify(splitPath));
      logger.verbose('Split Path Length: ' + splitPath.length);
      if (splitPath.length > 3) {
        logger.error('more than two path variables were passed, bailing.');
        return;
      }
      if (splitPath.length === 3) {
        if ((splitPath[1] === 'users') && (splitPath[2].replace(" ", "").length > 0)) {
          if (request.method === 'POST') {
            requestHandled = true;
            SubscribeRequest(response, splitPath[2], parsedUrl, requestData);
          } else if (request.method === 'DELETE') {
            requestHandled = true;
            RemoveRequest(response, parsedUrl, splitPath[2]);
          }
        }
      }
      if (!requestHandled) {
        logger.error("Request not handled.");
        response.writeHead(404, {
          "Content-Type": "text/plain"
        });
        response.end("404 Not Found\n");
      }
    });
  }).listen(localServicePort);

  logger.info("Server running at http://localhost:" + localServicePort);

  logger.verbose("rootPath = " + rootPath);

  logger.verbose("logPath = " + logPath);

  logger.verbose("subscriptionDirectory = " + subscriptionDirectory);

  logger.verbose("apiBaseUrl = " + apiBaseUrl);

  logger.verbose("apiParentAuthorQuery = " + apiParentAuthorQuery);

}).call(this);
