// Generated by CoffeeScript 1.3.3
(function() {
  var DirectoryExists, ProcessDirectory, ProcessUser, SendWP7Notification, SendWP7TileNotification, SendWP7ToastNotification, SendWindows8Notification, XML, apiBaseUrl, apiParentAuthorQuery, fs, http, jsxml, logPath, logger, path, rootPath, subscriptionDirectory, sys, url, winston;

  sys = require('util');

  http = require('http');

  url = require('url');

  path = require('path');

  fs = require('fs');

  jsxml = require('node-jsxml');

  winston = require('winston');

  XML = jsxml.XML;

  rootPath = __dirname;

  logPath = path.join(rootPath, 'logs/');

  subscriptionDirectory = path.join(rootPath, 'subscribedUsers/');

  apiBaseUrl = 'http://shackapi.stonedonkey.com/';

  apiParentAuthorQuery = 'Search/?ParentAuthor=';

  logger = new winston.Logger({
    transports: [
      new winston.transports.Console({
        colorize: true,
        timestamp: true,
        level: 'silly'
      }), new winston.transports.File({
        filename: logPath + 'processor.log',
        json: false,
        timestamp: true,
        level: 'silly'
      })
    ]
  });

  SendWindows8Notification = function(count, author, preview, userInfo) {
    return logger.verbose("Sending Windows 8 Notification...");
  };

  SendWP7Notification = function(requestOptions, payload, userInfo) {
    var request,
      _this = this;
    request = http.request(requestOptions, function(res) {
      var deviceConnectionStatus, notificationStatus, responseBody, responseSuccessful, subscriptionStatus;
      notificationStatus = res.headers['x-notificationstatus'].toLowerCase();
      deviceConnectionStatus = res.headers['x-deviceconnectionstatus'].toLowerCase();
      subscriptionStatus = res.headers['x-subscriptionstatus'].toLowerCase();
      res.setEncoding('utf8');
      responseBody = '';
      responseSuccessful = (res.statusCode === 200) && (notificationStatus === 'received') && (deviceConnectionStatus === 'connected') && (subscriptionStatus === 'active');
      res.on('data', function(chunk) {
        return responseBody += chunk;
      });
      return res.on('end', function() {
        var file;
        if (!responseSuccessful) {
          if (subscriptionStatus === 'expired') {
            file = path.join(subscriptionDirectory, userInfo.deviceId);
            return path.exists(file, function(exists) {
              if (exists) {
                fs.unlinkSync(file);
                return logger.info('Device ID ' + userInfo.deviceId + ' for user ' + userInfo.userName + ' has expired.  Removing subscription.');
              }
            });
          } else {
            logger.info('Sending push failed.');
            logger.info('Code: ' + res.statusCode);
            logger.info('Notification Status: ' + notificationStatus);
            logger.info('Device Connection Status: ' + deviceConnectionStatus);
            logger.info('Subscription Status: ' + subscriptionStatus);
            return logger.info('Body: ' + responseBody);
          }
        } else {
          return logger.info('WP7 notification sent successfully!');
        }
      });
    });
    request.on('error', e, logger.info('Request Failed: ' + e.message));
    request.write(payload);
    return request.end();
  };

  SendWP7ToastNotification = function(author, preview, userInfo) {
    var parsedUri, requestOptions, toastData;
    parsedUri = url.parse(userInfo.notificationUri);
    toastData = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "<wp:Notification xmlns:wp=\"WPNotification\">" + "<wp:Toast>" + ("<wp:Text1>" + author + "</wp:Text1>") + ("<wp:Text2>" + preview + "</wp:Text2>") + "</wp:Toast>" + "</wp:Notification>";
    requestOptions = {
      hostname: parsedUri.hostname,
      port: parsedUri.port,
      path: parsedUri.path,
      method: 'POST',
      headers: {
        'Content-Type': 'text/xml',
        'Content-Length': toastData.length,
        'X-WindowsPhone-Target': 'toast',
        'X-NotificationClass': '2'
      }
    };
    logger.info('**Sending toast notification\n' + toastData);
    return SendWP7Notification(requestOptions, toastData, userInfo);
  };

  SendWP7TileNotification = function(count, author, preview, userInfo) {
    var parsedUri, requestOptions, tileMessage;
    parsedUri = url.parse(userInfo.notificationUri);
    tileMessage = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "<wp:Notification xmlns:wp=\"WPNotification\">" + "<wp:Tile>" + ("<wp:Count>" + count + "</wp:Count>") + ("<wp:BackTitle>" + author + "</wp:BackTitle>") + ("<wp:BackContent>" + preview + "</wp:BackContent>") + "</wp:Tile>" + "</wp:Notification>";
    requestOptions = {
      hostname: parsedUri.hostname,
      port: parsedUri.port,
      path: parsedUri.path,
      method: 'POST',
      headers: {
        'Content-Type': 'text/xml',
        'Content-Length': tileMessage.length,
        'X-WindowsPhone-Target': 'token',
        'X-NotificationClass': '1'
      }
    };
    logger.info('**Sending tile notification\n' + tileMessage);
    return SendWP7Notification(requestOptions, tileMessage, userInfo);
  };

  ProcessUser = function(userInfo) {
    var requestOptions, siteUrl,
      _this = this;
    siteUrl = url.parse(apiBaseUrl + apiParentAuthorQuery + userInfo.userName);
    requestOptions = {
      host: siteUrl.host,
      port: 80,
      path: siteUrl.path
    };
    return http.get(requestOptions, function(response) {
      var dataReceived;
      dataReceived = '';
      response.on('data', function(chunk) {
        return dataReceived += chunk;
      });
      return response.on('end', function() {
        var author, body, fileNameToSave, newReplyCount, replies, totalResults, totalResultsAttribute, xmlDoc;
        xmlDoc = new XML(dataReceived);
        if (xmlDoc === null) {
          return;
        }
        totalResultsAttribute = xmlDoc.attribute('total_results');
        if (totalResultsAttribute === null) {
          return;
        }
        totalResults = totalResultsAttribute.toString();
        newReplyCount = parseInt(totalResults) - parseInt(userInfo.replyCountLastNotified);
        if (newReplyCount > 0) {
          logger.info("Previous count for " + userInfo.userName + " was " + userInfo.replyCount + " current count is " + totalResults + ", we got new stuff!");
          replies = xmlDoc.child('result');
          logger.verbose("replies: " + replies);
          replies.each(function(item, index) {
            return logger.verbose("item: " + item);
          });
          if (latestResult !== null) {
            author = latestResult.attribute('author').toString();
            body = latestResult.child('body').toString().substr(0, 40);
            logger.verbose("Latest Author: " + author + " Body: " + body);
            logger.verbose("UserInfo " + (JSON.stringify(userInfo)));
            if (userInfo.hasOwnProperty('notificationUri')) {
              if ((userInfo.notificationType === 2) || (userInfo.notificationType === 1)) {
                SendWP7TileNotification(parseInt(totalResults) - parseInt(userInfo.replyCount), author, body, userInfo);
                if (userInfo.notificationType === 2) {
                  SendWP7ToastNotification(author, body, userInfo);
                }
              } else if (userInfo.notificationType === 3) {
                SendWindows8Notification(parseInt(totalResults) - parseInt(userInfo.replyCount), author, body, userInfo);
              }
            } else {
              logger.info('Would send push notification of\n  Author: ' + author + '\n  Preview: ' + body);
            }
          }
          userInfo.replyCountLastNotified = totalResults;
          fileNameToSave = path.join(subscriptionDirectory, userInfo.deviceId);
          return fs.writeFile(fileNameToSave, JSON.stringify(userInfo), function(err) {
            if (err) {
              return logger.info("Error saving file " + fileNameToSave + " " + err);
            } else {
              return logger.info("Saved updated file " + fileNameToSave + " for username " + userInfo.userName + "!");
            }
          });
        } else {
          return logger.info('No new replies for ' + userInfo.userName + ', previous count notified at was ' + userInfo.replyCountLastNotified + ' current count is ' + totalResults);
        }
      });
    });
  };

  DirectoryExists = function(dir) {
    var stats;
    try {
      stats = fs.statSync(dir);
      return stats.isDirectory();
    } catch (ex) {
      return false;
    }
  };

  ProcessDirectory = function(dir) {
    var _this = this;
    logger.info("Processing directory " + dir);
    return fs.readdir(dir, function(err, files) {
      var file, fileData, userData, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        logger.info('Processing file ' + file + ' in ' + dir);
        fileData = fs.readFileSync(path.join(dir, file), 'utf8');
        userData = JSON.parse(fileData);
        _results.push(ProcessUser(userData));
      }
      return _results;
    });
  };

  ProcessDirectory(subscriptionDirectory);

}).call(this);
